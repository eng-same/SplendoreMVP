@model SplendoreMVP.View_Models.DashboardVM

@{
    ViewData["Title"] = "Admin Dashboard";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />

<div class="container-fluid py-4">
    <h2 class="mb-3">Admin Dashboard</h2>

    <div class="row g-3 mb-4">
        <div class="col-sm-6 col-md-3">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h6>Total Orders</h6>
                    <h3>@Model.TotalOrders</h3>
                </div>
            </div>
        </div>

        <div class="col-sm-6 col-md-3">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h6>Total Products</h6>
                    <h3>@Model.TotalProducts</h3>
                </div>
            </div>
        </div>

        <div class="col-sm-6 col-md-3">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h6>Total Users</h6>
                    <h3>@Model.TotalUsers</h3>
                </div>
            </div>
        </div>

        <div class="col-sm-6 col-md-3">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h6>Total Revenue</h6>
                    <h3>@Model.TotalRevenue.ToString("C")</h3>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-lg-8">
            <div class="card">
                <div class="card-body">
                    <h5>Monthly Sales (last @Model.MonthlySales.Count months)</h5>
                    <canvas id="monthlySalesChart" height="120"></canvas>
                </div>
            </div>
        </div>

        <div class="col-lg-4">
            <div class="card mb-3">
                <div class="card-body">
                    <h6>Top @Model.TopSoldProducts.N Sold Products</h6>
                    <ul class="list-group">
                        @foreach (var p in Model.TopSoldProducts.Products)
                        {
                            <li class="list-group-item d-flex align-items-center">
                                <img src="@(!string.IsNullOrEmpty(p.ImageUrl) ? p.ImageUrl : "https://placehold.co/48x48")" class="rounded me-3" style="width:48px;height:48px;object-fit:cover;" />
                                <div class="flex-grow-1">
                                    <strong>@p.ProductName</strong><br />
                                    <small>@p.TotalQuantitySold sold • @p.TotalRevenue.ToString("C")</small>
                                </div>
                            </li>
                        }
                    </ul>
                </div>
            </div>

            <div class="card">
                <div class="card-body">
                    <h6>Out of Stock</h6>
                    <ul class="list-group">
                        @if (Model.OutOfStockProducts.Any())
                        {
                            foreach (var p in Model.OutOfStockProducts)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <span>@p.Name</span>
                                    <span class="badge bg-danger">@p.StockQuantity</span>
                                </li>
                            }
                        }
                        else
                        {
                            <li class="list-group-item">No products out of stock.</li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h6>Low Stock (<= threshold)</h6>
                    @* put this near top of the page so token input exists in DOM *@
                    @Html.AntiForgeryToken()

                    <!-- ... other markup ... -->

                    <table class="table table-sm">
                        <thead>
                            <tr>
                                <th>Product</th>
                                <th>Stock</th>
                                <th style="width: 180px;" class="text-center">Quick Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.LowStockProducts.Any())
                            {
                                foreach (var p in Model.LowStockProducts)
                                {
                                    <tr data-product-id="@p.Id">
                                        <td class="product-name">@p.Name</td>
                                        <!-- stock span has id so JS can update it -->
                                        <td><span class="product-stock" id="stock-@p.Id">@p.StockQuantity</span></td>
                                        <td class="text-center">
                                            <div class="btn-group" role="group">
                                                <button class="btn btn-sm btn-outline-success"
                                                        onclick="quickUpdateStockPrompt(@p.Id, '@p.Name')">
                                                    Update Stock
                                                </button>
                                                <button class="btn btn-sm btn-outline-info"
                                                        onclick="quickUpdatePricePrompt(@p.Id, '@p.Name', @p.Price)">
                                                    Update Price
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr><td colspan="3">No low-stock items.</td></tr>
                            }
                        </tbody>
                    </table>

                    <!-- placeholder for success/error messages -->
                    <div id="dashboardMessage" class="position-fixed bottom-0 end-0 p-3" style="z-index:1055;"></div>

                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h6>Quick Product Actions</h6>
                    <p class="text-muted small"></p>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    (function() {
        var labels = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.MonthlySales.Select(m => m.Label)));
        var data = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.MonthlySales.Select(m => m.Total)));

        var ctx = document.getElementById('monthlySalesChart').getContext('2d');
        new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Sales',
                    data: data,
                    fill: true,
                    tension: 0.3,
                    pointRadius: 4,
                    borderWidth: 2
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            // if you want currency formatting in ticks, do it server-side or with callback
                        }
                    }
                }
            }
        });
    })();
</script>
@section Scripts {
    <script>
        // Helper: get antiforgery token rendered by
        // @Html.AntiForgeryToken()
        function getAntiForgeryToken() {
            const input = document.querySelector('input[name="__RequestVerificationToken"]');
            return input ? input.value : '';
        }

        // Small helper to show bootstrap-like toast/alert (auto-dismiss)
        function showMessage(message, type = 'success', timeout = 3000) {
            const container = document.getElementById('dashboardMessage');
            const id = 'msg-' + Date.now();
            const div = document.createElement('div');
            div.id = id;
            div.className = `alert alert-${type} shadow`;
            div.style.minWidth = '220px';
            div.innerText = message;
            container.appendChild(div);

            setTimeout(() => {
                div.classList.add('fade');
                setTimeout(() => container.removeChild(div), 300);
            }, timeout);
        }

        // Prompt wrappers for better UX
        function quickUpdateStockPrompt(id, name) {
            const current = document.querySelector(`#stock-${id}`)?.innerText ?? '';
            const input = prompt(`Update stock for "${name}" (current: ${current}):`, current);
            if (input === null) return;
            const stock = parseInt(input, 10);
            if (isNaN(stock) || stock < 0) {
                showMessage('Invalid stock value', 'danger');
                return;
            }
            quickUpdateStock(id, stock);
        }

        function quickUpdatePricePrompt(id, name, currentPrice) {
            const input = prompt(`Update price for "${name}" (current: ${currentPrice}):`, currentPrice);
            if (input === null) return;
            const price = parseFloat(input);
            if (isNaN(price) || price < 0) {
                showMessage('Invalid price value', 'danger');
                return;
            }
            quickUpdatePrice(id, price);
        }

        // AJAX calls (form-encoded body so default model binding works)
        async function quickUpdateStock(id, stock) {
            const token = getAntiForgeryToken();
            try {
                const body = new URLSearchParams();
                body.append('__RequestVerificationToken', token);
                body.append('id', id);
                body.append('stock', stock);

                const res = await fetch('/Admin/Admin/QuickUpdateStock', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: body
                });

                if (!res.ok) {
                    const txt = await res.text();
                    showMessage('Update failed', 'danger');
                    console.error('QuickUpdateStock error:', res.status, txt);
                    return;
                }

                const data = await res.json();
                const stockEl = document.getElementById(`stock-${data.id}`);
                if (stockEl) stockEl.innerText = data.stock;
                showMessage('Stock updated', 'success');

            } catch (err) {
                console.error(err);
                showMessage('Network error', 'danger');
            }
        }

        async function quickUpdatePrice(id, price) {
            const token = getAntiForgeryToken();
            try {
                const body = new URLSearchParams();
                body.append('__RequestVerificationToken', token); // ✅ token in body
                body.append('id', id);
                body.append('price', price);

                const res = await fetch('/Admin/Admin/QuickUpdatePrice', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: body
                });

                if (!res.ok) {
                    const txt = await res.text();
                    showMessage('Update failed', 'danger');
                    console.error('QuickUpdatePrice error:', res.status, txt);
                    return;
                }

                const data = await res.json();
                const priceEl = document.getElementById(`price-${data.id}`);
                if (priceEl) priceEl.innerText = parseFloat(data.price).toFixed(2);
                showMessage('Price updated', 'success');

            } catch (err) {
                console.error(err);
                showMessage('Network error', 'danger');
            }
        }
    </script>
}
